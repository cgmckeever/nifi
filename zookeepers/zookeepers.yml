---
- name: zookeepers.yml
  hosts: localhost
  become: True
  become_user: root
  tasks:

    - name: set zookeeper connection string
      set_fact:
        zookeeper_nodes: 'tf-nifi-1:2181,tf-nifi-2:2181,tf-nifi-3:2181'

    - name: fetch node_id
      shell: |
        cat /opt/node_id
      register: node_id

    - name: set zookeeper ips in /etc/hosts
      lineinfile:
        line: "{{ item }}"
        path: /etc/hosts
      with_items:
        - "# zookeepers"
        - "{{ node1_ip }} tf-nifi-1"
        - "{{ node2_ip }} tf-nifi-2"
        - "{{ node3_ip }} tf-nifi-3"

    - name: nifi required packages
      package:
        name: "{{ packages }}"
        state: latest
      vars:
        packages:
        - default-jre
        - openssl
        - nfs-common
        - git
        - binutils
        - python-pip

    - name: Clone efs-utils
      git:
        repo: https://github.com/aws/efs-utils
        dest: /opt/efs-utils
        clone: yes
        update: no

    - name: find previously created efs-utils
      find:
        paths: /opt/efs-utils/build
        patterns: 'amazon-efs-utils*.deb'
      register: efs_utils_found
      ignore_errors: true

    - name: build efs-utils
      shell: |
        ./build-deb.sh
      args:
        chdir: /opt/efs-utils
      when: efs_utils_found.matched == 0

    - name: find newly created efs-utils
      find:
        paths: /opt/efs-utils/build
        patterns: 'amazon-efs-utils*.deb'
      register: efs_utils_build

    - name: Install efs-utils
      apt:
        deb: "{{ item.path }}"
      with_items: "{{ efs_utils_build.files }}"
      when: efs_utils_found.matched != 0

    - name: set efs hostname checking false
      lineinfile:
        path: /etc/amazon/efs/efs-utils.conf
        regexp: '^stunnel_check_cert_hostname = true'
        line: 'stunnel_check_cert_hostname = false'

    - name: check mount path exists
      stat:
        path: /mnt/nifi
      register: efs_mount

    - name: path /mnt/nifi
      file:
        path: /mnt/nifi
        state: directory
        owner: root
        group: root
        mode: '0750'
      when: efs_mount.stat.exists == false

    - name: mount nifi
      mount:
        state: mounted
        fstype: efs
        path: /mnt/nifi
        src: "{{ efs_source }}:/"
        opts: tls,iam

    - name: efs dirs
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: 0750
      with_items:
        - /mnt/nifi/admin-certificates
        - /mnt/nifi/nifi-ca-certificates
        - /mnt/nifi/nifi-certificates
        - /mnt/nifi/conf
        - /mnt/nifi/downloads
        - /mnt/nifi/cluster
        - /mnt/nifi/cluster/join
        - /mnt/nifi/cluster/invite
        - /mnt/nifi/cluster/leave
      when:
        - ansible_default_ipv4.address == node1_ip

    - name: nodes - certificate directory
      file:
        path: /mnt/nifi/nifi-certificates/{{ ansible_nodename }}
        state: directory
        owner: root
        group: root
        mode: 0750

    - name: check zookeeper downloaded
      stat:
        path: /mnt/nifi/downloads/zookeeper.tar.gz
      register: zk_download
      when: ansible_default_ipv4.address == node1_ip

    - name: download zookeeper if not downloaded
      get_url:
        url: http://{{ mirror_host }}/pub/apache/zookeeper/current/apache-zookeeper-{{ zk_version }}-bin.tar.gz
        dest: /mnt/nifi/downloads/zookeeper.tar.gz
        mode: '0644'
      when: 
        - ansible_default_ipv4.address == node1_ip
        - zk_download.stat.exists == false

    - name: check nifi downloaded
      stat:
        path: /mnt/nifi/downloads/nifi.tar.gz
      register: nifi_downloaded
      when: ansible_default_ipv4.address == node1_ip

    - name: download nifi if not downloaded
      get_url:
        url: http://{{ mirror_host }}/pub/apache/nifi/{{ nifi_version }}/nifi-{{ nifi_version }}-bin.tar.gz
        dest: /mnt/nifi/downloads/nifi.tar.gz
        mode: '0440'
      when:
        - ansible_default_ipv4.address == node1_ip
        - nifi_downloaded.stat.exists == false

    - name: check toolkit downloaded
      stat:
        path: /mnt/nifi/downloads/nifi-toolkit.tar.gz
      register: toolkit_downloaded
      when: ansible_default_ipv4.address == node1_ip

    - name: download toolkit if not downloaded
      get_url:
        url: http://{{ mirror_host }}/pub/apache/nifi/{{ nifi_version }}/nifi-toolkit-{{ nifi_version }}-bin.tar.gz
        dest: /mnt/nifi/downloads/nifi-toolkit.tar.gz
        mode: '0440'
      when:
        - ansible_default_ipv4.address == node1_ip
        - toolkit_downloaded.stat.exists == false

    - name: nodes - wait for downloads
      wait_for:
        path: "/mnt/nifi/downloads/{{ item }}"
        state: present
        timeout: 720
      with_items:
        - zookeeper.tar.gz
        - nifi.tar.gz
        - nifi-toolkit.tar.gz
      when:
        - ansible_default_ipv4.address != node1_ip

    - name: check zookeeper unarchived
      stat:
        path: /opt/zookeeper-{{ zk_version }}/README
      register: zk_unarchived
      when: ansible_default_ipv4.address == node1_ip

    - name: unarchive zookeeper if not unarchived
      unarchive:
        src: /mnt/nifi/downloads/zookeeper.tar.gz
        dest: /opt
        remote_src: yes

    - name: link zookeeper version to /opt/zookeeper
      file:
        src: /opt/apache-zookeeper-{{ zk_version }}-bin
        path: /opt/zookeeper
        state: link
        mode: 0755
        owner: root
        group: root

    - name: check nifi unarchived
      stat:
        path: /opt/nifi-{{ nifi_version }}/README
      register: nifi_unarchived

    - name: unarchive nifi when not unarchived
      unarchive:
        src: /mnt/nifi/downloads/nifi.tar.gz
        dest: /opt
        remote_src: yes
      when: nifi_unarchived.stat.exists == false

    - name: link nifi version to /opt/nifi
      file:
        src: /opt/nifi-{{ nifi_version }}
        path: /opt/nifi
        state: link
        mode: 0755
        owner: root
        group: root

    - name: check toolkit unarchived
      stat:
        path: /opt/nifi-toolkit-{{ nifi_version }}/README
      register: toolkit_unarchived

    - name: unarchive toolkit when not unarchived
      unarchive:
        src: /mnt/nifi/downloads/nifi-toolkit.tar.gz
        dest: /opt
        remote_src: yes
      when: toolkit_unarchived.stat.exists == false

    - name: link toolkit version to /opt/nifi-toolkit
      file:
        src: /opt/nifi-toolkit-{{ nifi_version }}
        path: /opt/nifi-toolkit
        state: link
        mode: 0755
        owner: root
        group: root

    - name: authorizers.xml
      copy:
        src: authorizers.xml
        dest: /opt/nifi/conf/authorizers.xml
        owner: root
        group: root
        mode: 0640

    - name: nifi properties
      template:
        src: nifi.properties
        dest: /opt/nifi/conf/nifi.properties
        owner: root
        group: root
        mode: 0640

    - name: nifi systemd service file
      copy:
        src: nifi.service
        dest: /etc/systemd/system/nifi.service
        mode: 0444
        owner: root
        group: root

    - name: zookeeper systemd unit file
      copy:
        src: zookeeper.service
        dest: /etc/systemd/system/zookeeper.service
        mode: 0644
        owner: root
        group: root

    - name: check password generated
      stat:
        path: /mnt/nifi/generated_password
      register: password_generated
      when:
        - ansible_default_ipv4.address == node1_ip

    - name: generate password if not generated
      shell: |
        head /dev/urandom | tr -dc A-Za-z0-9 | head -c 20 > /mnt/nifi/generated_password
      ignore_errors: True
      when:
        - ansible_default_ipv4.address == node1_ip
        - password_generated.stat.exists == false

    - name: wait for generated_password file
      wait_for:
        path: /mnt/nifi/generated_password
        state: present
        timeout: 720
      when:
        - ansible_default_ipv4.address != node1_ip

    - name: set generated_password var
      shell: |
        cat /mnt/nifi/generated_password
      register: generated_password

    - name: node1 - toolkit server script
      template:
        src: toolkit-server.sh
        dest: /usr/local/bin/toolkit-server.sh
        owner: root
        group: root
        mode: 0750
      when: ansible_default_ipv4.address == node1_ip

    - name: node1 - check tls.json generated
      stat:
        path: /mnt/nifi/nifi-ca-certificates/tls.json
      register: ca_tls

    - name: node1 - toolkit server script exec
      shell: |
        /usr/local/bin/toolkit-server.sh
      args:
        chdir: /mnt/nifi/nifi-ca-certificates/
        executable: /bin/bash
      when:
        - ansible_default_ipv4.address == node1_ip
        - ca_tls.stat.exists == false

    - name: node1 - toolkit service
      template:
        src: toolkit-server.service
        dest: /etc/systemd/system/toolkit-server.service
        owner: root
        group: root
        mode: 0644
      when: ansible_default_ipv4.address == node1_ip

    - name: node1 - toolkit start
      systemd:
        state: started
        enabled: yes
        name: toolkit-server
        daemon_reload: yes
      when: ansible_default_ipv4.address == node1_ip

    - name: node1 - check admin tls.json
      stat:
        path: /mnt/nifi/admin-certificates/tls.json
      register: admin_certificate
      when: ansible_default_ipv4.address == node1_ip

    - name: node1 - toolkit admin 
      shell: |
        /opt/nifi-toolkit/bin/tls-toolkit.sh client -a RSA -c tf-nifi-1 -p 2170 -D "CN=admin,OU=NIFI" -f /mnt/nifi/admin-certificates/tls.json -k 2048 -T PKCS12 -t {{ generated_password.stdout }}
      args:
        chdir: /mnt/nifi/admin-certificates
        executable: /bin/bash
      when:
        - ansible_default_ipv4.address == node1_ip
        - admin_certificate.stat.exists == false

    - name: register ADMIN_KEYSTORE_PASS
      shell: |
        awk -F'"' '/keyStorePassword/ { print $4 }' /mnt/nifi/admin-certificates/tls.json
      register: admin_keystore_pass
      when:
        - ansible_default_ipv4.address == node1_ip

    - name: register ADMIN_TRUSTSTORE_PASS
      shell: |
        awk -F'"' '/trustStorePassword/ { print $4 }' /mnt/nifi/admin-certificates/tls.json
      register: admin_truststore_pass
      when:
        - ansible_default_ipv4.address == node1_ip

    - name: admin cli.properties template
      template:
        src: cli.properties
        dest: /mnt/nifi/admin-certificates/cli.properties
        owner: root
        group: root
        mode: '0640'
      when:
        - ansible_default_ipv4.address == node1_ip

    - name: ensure boto3 for pip
      pip:
        executable: /usr/bin/pip
        name: boto3

    - name: node1 - place admin tls on s3
      aws_s3:
        bucket: "{{ s3_bucket }}"
        object: "/nifi/admin-certificates/{{ item }}"
        src: "/mnt/nifi/admin-certificates/{{ item }}"
        mode: put
      with_items:
        - tls.json
        - keystore.pkcs12
      when: ansible_default_ipv4.address == node1_ip

    - name: nodes - wait for toolkit server
      wait_for:
        host: "{{ node1_ip }}"
        port: 2170
        timeout: 360

    - name: nodes - check client tls.json
      stat:
        path: /mnt/nifi/nifi-certificates/{{ ansible_nodename }}/tls.json
      register: node_tls

    - name: nodes - toolkit client exec if no tls.json
      shell: |
        export JAVA_HOME=/usr/lib/jvm/default-java 
        /opt/nifi-toolkit/bin/tls-toolkit.sh client -a RSA -c tf-nifi-1 -p 2170 -D "CN={{ ansible_nodename }},OU=NIFI" --subjectAlternativeNames {{ ansible_nodename }} -f /mnt/nifi/nifi-certificates/{{ ansible_nodename }}/tls.json -k 2048 -T jks -t {{ generated_password.stdout }}
      args:
        chdir: /mnt/nifi/nifi-certificates/{{ ansible_nodename }}
        executable: /bin/bash
      when: node_tls.stat.exists == false

    - name: register KEYSTORE_PASS
      shell: |
        awk -F'"' '/keyStorePassword/ { print $4 }' /mnt/nifi/nifi-certificates/{{ ansible_nodename }}/tls.json
      register: keystore_pass

    - name: register TRUSTSTORE_PASS
      shell: |
        awk -F'"' '/trustStorePassword/ { print $4 }' /mnt/nifi/nifi-certificates/{{ ansible_nodename }}/tls.json
      register: truststore_pass

    - name: set keystorePasswd in nifi.properties
      lineinfile:
        path: /opt/nifi/conf/nifi.properties
        regexp: '^nifi\.security\.keystorePasswd=.*'
        line: "nifi.security.keystorePasswd={{ keystore_pass.stdout }}"

    - name: set keyPasswd in nifi.properties
      lineinfile:
        path: /opt/nifi/conf/nifi.properties
        regexp: '^nifi\.security\.keyPasswd=.*'
        line: "nifi.security.keyPasswd={{ keystore_pass.stdout }}"

    - name: set truststorePasswd in nifi.properties
      lineinfile:
        path: /opt/nifi/conf/nifi.properties
        regexp: '^nifi\.security\.truststorePasswd=.*'
        line: "nifi.security.truststorePasswd={{ truststore_pass.stdout }}"

    - name: zookeeper data directory
      file:
        path: /opt/zookeeper/data
        state: directory
        mode: 0755
        owner: root
        group: root

    - name: zookeeper myid file
      template:
        src: myid
        dest: /opt/zookeeper/data/myid
        owner: root
        group: root
        mode: 0444

    - name: zookeeper conf
      template:
        src: zoo.cfg
        dest: /opt/zookeeper/conf/zoo.cfg
        owner: root
        group: root
        mode: 0640

    - name: zookeeper systemd service start/enable
      systemd:
        state: started
        enabled: yes
        name: zookeeper
        daemon_reload: yes

    - name: node1 - nifi systemd service start/enable
      systemd:
        state: started
        enabled: yes
        name: nifi
        daemon_reload: yes
      when:
        - ansible_default_ipv4.address == node1_ip

    - name: node1 - wait for users.xml, authorizations.xml, and flow.xml.gz
      wait_for:
        path: "/opt/nifi/conf/{{ item }}"
        state: present
        timeout: 240
      with_items:
        - users.xml
        - authorizations.xml
        - flow.xml.gz
      when:
        - ansible_default_ipv4.address == node1_ip

    - name: node1 - copy users.xml, authorizations.xml, and flow.xml.gz to nfs
      copy:
        src: "/opt/nifi/conf/{{ item }}"
        dest: "/mnt/nifi/conf/{{ item }}"
        remote_src: true
        owner: root
        group: root
        mode: 0640
      with_items:
        - users.xml
        - authorizations.xml
        - flow.xml.gz
      when:
        - ansible_default_ipv4.address == node1_ip

    - name: other nodes - wait for users.xml, authorizations.xml, and flow.xml.gz
      wait_for:
        path: "/mnt/nifi/conf/{{ item }}"
        state: present
        timeout: 480
      with_items:
        - users.xml
        - authorizations.xml
        - flow.xml.gz
      when:
        - ansible_default_ipv4.address != node1_ip

    - name: other nodes - copy users.xml, authorizations.xml, and flow.xml.gz from nfs
      copy:
        dest: "/opt/nifi/conf/{{ item }}"
        src: "/mnt/nifi/conf/{{ item }}"
        remote_src: true
        owner: root
        group: root
        mode: 0640
      with_items:
        - users.xml
        - authorizations.xml
        - flow.xml.gz
      when:
        - ansible_default_ipv4.address != node1_ip

    - name: other nodes - nifi systemd service start/enable
      systemd:
        state: started
        enabled: yes
        name: nifi
        daemon_reload: yes
      when:
        - ansible_default_ipv4.address != node1_ip

    - name: nodes - nifi-join and leave play
      copy:
        src: "{{ item }}"
        dest: "/mnt/nifi/cluster/{{ item }}"
        owner: root
        group: root
        mode: 0640
      with_items:
        - nifi-join.yml
        - nifi-leave.yml

    - name: nodes - nifi-join and leave service and timer
      copy:
        src: "{{ item }}"
        dest: "/etc/systemd/system/{{ item }}"
        owner: root
        group: root
        mode: 0640
      with_items:
        - nifi-join.service
        - nifi-join.timer
        - nifi-leave.service
        - nifi-leave.timer

    - name: nodes - nifi-join systemd
      systemd:
        name: "nifi-join.{{ item }}"
        daemon_reload: yes
        state: started
        enabled: yes
      with_items:
        - service
        - timer

    - name: nodes - nifi-leave systemd
      systemd:
        name: "nifi-leave.{{ item }}"
        daemon_reload: yes
        state: started
        enabled: yes
      with_items:
        - service
        - timer
